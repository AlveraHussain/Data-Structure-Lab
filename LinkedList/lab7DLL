#include<iostream>
#include<conio.h>
#include<iomanip>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        this->data = value;
        this->next = nullptr;
        this->prev = nullptr;
    }
};

class DLL {
public:
    Node* head;
    Node* tail;

    DLL() {
        head = nullptr;
        tail = nullptr;
    }

    //  Task 1: Destructor
    ~DLL() {
        Node* current = head;
        while (current) {
            Node* temp = current;
            current = current->next;
            delete temp;
        }
        head = nullptr;
        tail = nullptr;
    }

    void display() {
        Node* current = head;
        if (current == nullptr) {
            cout << "List is Empty" << endl;
            return;
        }
        while (current != nullptr) {
            cout << current->data << endl;
            current = current->next;
        }
    }

    void Display() {
        Node* temp = head;
        cout << "\n------------------------------------------------------\n";
        cout << "     Prev Address        |   Data   |     Next Address |   Node Address\n";
        cout << "------------------------------------------------------\n";
        while (temp != nullptr) {
            cout << setw(20) << temp->prev
                << " | " << setw(7) << temp->data
                << " | " << setw(18) << temp->next
                << " | " << setw(20) << temp
                << endl;
            temp = temp->next;
        }
        cout << endl << "Tail: " << tail << endl;
        cout << "------------------------------------------------------\n";
    }

    void insertAtBegin(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        if (head != nullptr) {
            head->prev = newNode;
        }
        head = newNode;
        if (head->next == nullptr) {
            tail = newNode;
        }
    }

    //  Task 2: insertAtPos with edge case handling
    void insertAtPos(int position, int value) {
        if (position <= 0) {
            cout << "Invalid Index..!!" << endl;
            return;
        }
        if (position == 1 || head == nullptr) {
            insertAtBegin(value);
            return;
        }

        Node* current = head;
        for (int i = 1; i < position - 1 && current != nullptr; i++) {
            current = current->next;
        }

        if (current == nullptr) {
            cout << "Invalid Index..!!" << endl;
            return;
        }

        Node* newNode = new Node(value);
        newNode->next = current->next;
        newNode->prev = current;

        if (current->next != nullptr)
            current->next->prev = newNode;
        else
            tail = newNode;

        current->next = newNode;
    }

    //  Task 3: deleteFB with head fix
    void deleteFB() {
        if (head == nullptr) {
            cout << "List is Empty" << endl;
            return;
        }
        else if (head->next == nullptr) {
            delete head;
            head = nullptr;
            tail = nullptr;
        }
        else {
            Node* temp = head;
            head = head->next;
            head->prev = nullptr;
            delete temp;
        }
    }

    //  Task 4: DisplayNode fixed to show only one node
    void DisplayNode(Node* temp) {
        if (temp == nullptr) {
            cout << "Node is null." << endl;
            return;
        }
        cout << "\n------------------------------------------------------\n";
        cout << "     Prev Address        |   Data   |     Next Address |   Node Address\n";
        cout << "------------------------------------------------------\n";
        cout << setw(20) << temp->prev
            << " | " << setw(7) << temp->data
            << " | " << setw(18) << temp->next
            << " | " << setw(20) << temp
            << endl;
        cout << "------------------------------------------------------\n";
    }

    void search(int value) {
        Node* current = head;
        while (current != nullptr) {
            if (current->data == value) {
                cout << "Node found..." << endl;
                DisplayNode(current);
                return;
            }
            current = current->next;
        }
        cout << "Node not found." << endl;
    }

    void insertAtEnd(int value) {
        if (tail == nullptr) {
            insertAtBegin(value);
        }
        else {
            Node* newNode = new Node(value);
            tail->next = newNode;
            newNode->prev = tail;
            tail = newNode;
        }
    }
};

//  Main Function to Demonstrate All Tasks
int main() {
    DLL list;

    //  Task 2: Add four items and insert fifth at position 3
    list.insertAtEnd(10);
    list.insertAtEnd(20);
    list.insertAtEnd(30);
    list.insertAtEnd(40);
    list.insertAtPos(3, 25); // Insert 25 at position 3

    cout << "\nList after insertions:\n";
    list.Display();

    //  Task 3: Delete from beginning
    list.deleteFB();
    cout << "\nList after deleting from front:\n";
    list.Display();

    //  Task 4: Search and display a single node
    cout << "\nSearching for node with value 25:\n";
    list.search(25);

	
    return 0;
    
}
		
